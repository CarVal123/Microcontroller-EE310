//;---------------------
//; Title: Keypad Calculator
//;---------------------
//; Program Details:
//  This application receives user inputs from a keypad to perform basic arithmetic operations.
//  It prompts the user to enter a digit from 1 to 9, followed by selecting an arithmetic operation 
//  (addition, subtraction, multiplication, or division). Afterwards, another digit between 1 and 9 is entered. 
//  The calculation result is only displayed when the '#' key is pressed. Finally, the result is shown on the LEDs. 
//    
//; Inputs: RB3. 4. 6. 7
//; Outputs: RD0-7 & RB0,1, 2, 5
//; Setup: The Curiosity Board
//
//; Date: Apr 9, 2024
//; File Dependencies / Libraries: It is required to include the
//; Dependencies: CalcAssembly.h
//; Compiler: MPLAB X IDE v6.20 - XC8 (v2.46)
//; Author: Carlos Valdez
//; Versions:
//;       V1.0: Original
//; Useful links:
//; Keypad: https://www.circuitbasics.com/how-to-set-up-a-keypad-on-an-arduino/ 
//
//;---------------------
//; Initialization
//;---------------------
#include "./CalcAssembly.h"
#include <xc.h>

#define _XTAL_FREQ 4000000                 // Fosc  frequency for _delay()  library
#define FCY    _XTAL_FREQ/4
//;---------------------
//; Program Organization
//;---------------------
// void  MSDelay(unsigned int,unsigned int); // function declaration 
// unsigned char outputValue; 
//
// #define SevenSeg PORTB // reminder: also does not show up as a variable
// #define mybit PORTBbits.RB7
//
// void main(void) {
//    
//
//     asm("BANKSEL	PORTB") ; // This is not a standard approach! Try not to mix assembly and C
//     asm("CLRF	PORTB") ;       //Init PORTB
//     asm("BANKSEL	LATB") ;    //Data Latch
//     asm("CLRF	LATB") ;
//     asm("BANKSEL	ANSELB") ;
//     asm("CLRF	ANSELB") ;      //digital I/O
//     asm("BANKSEL	TRISB") ;
//     asm("MOVLW	0b00000000") ;
//     asm("MOVWF	TRISB") ;
//
//     while(1) // run forever
//     {
//         outputValue = 0x55; 
//         SevenSeg = outputValue; 
//         MSDelay(25,165);
//         SevenSeg++;                 // just increment by one
//         mybit = 1;                  // change bit 7 of PORTB
//         MSDelay(25,165); 
//     }     
// } // end of main()
//
//// // function definition 
// void  MSDelay(unsigned int itime1, unsigned int itime2)
// {
//     unsigned int i; unsigned int j;
//     for (i=0; i<itime1; i++)    // should be able to see itime as a variable
//       for (j=0; j<itime2; j++);      
// }
//;---------------------
//; Setup & Main Program
//;---------------------   
void MSDelay(unsigned int, unsigned int);
int OpCheck (int);
int InCheck (int);
int AddOperation(int, int);
int SubOperation(int, int);
int MulOperation(int, int);
int DivOperation(int, int);


char Operation_REG;
int X_Input_REG;
int Y_Input_REG;
int Display_Result_REG;
int Counterint;

void main(void) {
    PORTD = 0; 
    LATD = 0; 
    ANSELD = 0; 
    TRISD = 0;     //Initialize PORTD
    //Set all bits in PORTD as outputs
    
    PORTB = 0; //Initialize PORTB
    LATB = 0; 
    ANSELB = 0; 
    TRISB = 216;   
    //Set bits [7,6,4,3] in PORTB as inputs 0b11011000
    
    
    X_Input_REG = 0;
    Y_Input_REG = 0;
    Operation_REG = 0;
    Display_Result_REG = 0;
    Counterint = 0;
    
    while(1){
        
        // Check for X Input from keypad
        if (PORTD == 0){
            X_Input_REG = InCheck(X_Input_REG); // Check for X Input
            if (X_Input_REG > 0){ // If X Input detected
                PORTD = 1; // Set PORTD to 1
                MSDelay(100,200); // Introduce a delay after input
            }
        }
        
        // Reset conditions if necessary
        if (PORTD > 0){
            PORTBbits.RB1 = 1; // Set RB1 high
            if (PORTBbits.RB6 == 1) // Check if reset condition is met
            {
                PORTD = 0; // Reset PORTD
                X_Input_REG = 0; // Reset X input
                Y_Input_REG = 0; // Reset Y input
                Operation_REG = 0; // Reset operation
            }
            PORTBbits.RB1 = 0; // Set RB1 low
        }

        
        
        // Function to check for operation input on keypad
        if (PORTD == 1){
            Operation_REG = OpCheck(Operation_REG); // Check operation
            Counterint = Operation_REG;  // Assign operation to counter
        }
        
        if (Counterint > 0){ // If counter is greater than zero
            PORTD = 3; // Set PORTD to 3
            Counterint = 0; // Reset counter
            MSDelay(100,200); // Delay
        }
        
        //Function to check for Y Input for keypad input
        if (PORTD == 3){
            Y_Input_REG = InCheck(Y_Input_REG);
            if (Y_Input_REG > 0){
                PORTD = 2;
                MSDelay(200,200);
            }
        
            
            // Checks to reset the calculator 
            if (PORTD > 0){
                PORTBbits.RB1 = 1;
                if (PORTBbits.RB6 == 1){
                    PORTD = 0;
                    X_Input_REG = 0;
                    Y_Input_REG = 0;
                    Operation_REG = 0;
                }
                PORTBbits.RB1 = 0;
            }
        }
        
        
        // Compute the operation using the X_Input and Y_Input values
        if (PORTD == 2){ // If PORTD is 2
        
            if (Operation_REG == 1){ // If operation is addition

                Display_Result_REG = AddOperation(X_Input_REG, Y_Input_REG); // Perform addition
            }
            else if (Operation_REG == 2){ // If operation is subtraction

                Display_Result_REG = SubOperation(X_Input_REG, Y_Input_REG); // Perform subtraction
            }
            else if (Operation_REG == 3){ // If operation is multiplication

                Display_Result_REG = MulOperation(X_Input_REG, Y_Input_REG); // Perform multiplication
            }
            else if (Operation_REG == 4){ // If operation is division

                Display_Result_REG = DivOperation(X_Input_REG, Y_Input_REG); // Perform division
            }
            
            if (PORTD == 2){ // If PORTD is still 2
                PORTBbits.RB2 = 1; // Set RB2
                if (PORTBbits.RB6 == 1){ // If RB6 is pressed
                    PORTD = Display_Result_REG; // Display result on PORTD
                    MSDelay(200,200); // Delay
                }
                PORTBbits.RB2 = 0; // Clear RB2
            }
        }
        
        
        // Checks to reset the calculator
        if (PORTD == 2) // If PORTD is 2
        {
            PORTBbits.RB1 = 1; // Set RB1
            if (PORTBbits.RB6 == 1){ // If RB6 is pressed
                PORTD = 0; // Reset PORTD
                Y_Input_REG = 0; // Reset Y input
                X_Input_REG = 0; // Reset X input
                Operation_REG = 0; // Reset operation
            }
            PORTBbits.RB1 = 0; // Clear RB1
        }
    }
        
        
} 


// Delay function
void MSDelay(unsigned int itime1, unsigned int itime2)
{
    
    unsigned int i; unsigned int j;
    for (i = 0; i <itime1 ;  i++)
        for (j = 0 ; j<itime2 ; j++);
}    

// Operation check function
int OpCheck(int Operation_Flag){
    Operation_Flag = 0;
    if (Operation_Flag == 0){
        PORTBbits.RB5 = 1; // Set RB5
        // Check which operation is pressed
        if (PORTBbits.RB3 == 1)
            Operation_Flag = 1;
        if (PORTBbits.RB4 == 1)
            Operation_Flag = 2;
        if (PORTBbits.RB7 == 1)
            Operation_Flag = 3;
        if (PORTBbits.RB6 == 1)
            Operation_Flag = 4;
        PORTBbits.RB5 = 0; // Clear RB5
    }
    return Operation_Flag; // Return the operation flag
}


// Input check function
int InCheck(int Input_Flag){
    Input_Flag = 0;
    if (Input_Flag == 0){
        PORTBbits.RB0 = 1; // Set RB0
        // Check which input is pressed
        if (PORTBbits.RB3 == 1)
            Input_Flag = 1;
        else if (PORTBbits.RB4 == 1)
            Input_Flag = 4;
        else if (PORTBbits.RB7 == 1)
            Input_Flag = 7;
        PORTBbits.RB0 = 0; // Clear RB0
        }
        
    if (Input_Flag == 0){
        PORTBbits.RB1 = 1; // Set RB1
        // Check which input is pressed
        if (PORTBbits.RB3 == 1)
            Input_Flag = 2;
        else if (PORTBbits.RB4 == 1)
            Input_Flag = 5;
        else if (PORTBbits.RB7 == 1)
            Input_Flag = 8;
        PORTBbits.RB1 = 0; // Clear RB1
        }
        
    if (Input_Flag == 0){
        PORTBbits.RB2 = 1; // Set RB2
        // Check which input is pressed
        if (PORTBbits.RB3 == 1)
            Input_Flag = 3;
        else if (PORTBbits.RB4 == 1)
            Input_Flag = 6;
        else if (PORTBbits.RB7 == 1)
            Input_Flag = 9;
        PORTBbits.RB2 = 0; // Clear RB2
        }
    return Input_Flag; // Return the input flag
}



// Addition Function
int AddOperation(int Add_Input1, int Add_Input2)
{
    int ADD; // Variable to hold the result of addition
    ADD = Add_Input1 + Add_Input2; // Perform addition
    return ADD; // Return the result
}


// Subtraction Function
int SubOperation(int Sub_Input1, int Sub_Input2)
{
    int SUB; // Variable to hold the result of subtraction
    SUB = Sub_Input1 - Sub_Input2; // Perform subtraction
    return SUB; // Return the result
}


// Multiplication Function
int MulOperation(int Mul_Input1, int Mul_Input2)
{
    int MUL; // Variable to hold the result of multiplication
    MUL = Mul_Input1 * Mul_Input2; // Perform multiplication
    return MUL; // Return the result
}


// Division Function
int DivOperation(int Div_Input1, int Div_Input2)
{
    int DIV; // Variable to hold the result of division
    DIV = Div_Input1 / Div_Input2; // Perform division
    return DIV; // Return the result
}

