/*
 * ---------------------
 * Title: Light Intensity Measurement and Display
 * ---------------------
 * Program Details:
 * The purpose of this program is to measure the light intensity using an ADC and display it on an LCD.
 * Inputs: Analog voltage from light sensor (connected to RA0)
 * Outputs: Light intensity in Lux displayed on LCD (connected to PORTB and PORTD)
 * Setup: PIC18F47K42 Microcontroller  with connected ADC and LCD
 * Date: May 1, 2024
 * File Dependencies / Libraries: It is required to include the xc.h, stdio.h, string.h, and stdlib.h libraries.
 * Compiler: xc8, v6.20
 * Author: Carlos Valdez
 */



// PIC18F46K42 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1L
#pragma config FEXTOSC = LP     // External Oscillator Selection (LP (crystal oscillator) optimized for 32.768 kHz; PFM set to low power)
#pragma config RSTOSC = EXTOSC  // Reset Oscillator Selection (EXTOSC operating per FEXTOSC bits (device manufacturing default))

// CONFIG1H
#pragma config CLKOUTEN = OFF   // Clock out Enable bit (CLKOUT function is disabled)
#pragma config PR1WAY = ON      // PRLOCKED One-Way Set Enable bit (PRLOCK bit can be cleared and set only once)
#pragma config CSWEN = ON       // Clock Switch Enable bit (Writing to NOSC and NDIV is allowed)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)

// CONFIG2L
#pragma config MCLRE = EXTMCLR  // MCLR Enable bit (If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR )
#pragma config PWRTS = PWRT_OFF // Power-up timer selection bits (PWRT is disabled)
#pragma config MVECEN = ON      // Multi-vector enable bit (Multi-vector enabled, Vector table used for interrupts)
#pragma config IVT1WAY = ON     // IVTLOCK bit One-way set enable bit (IVTLOCK bit can be cleared and set only once)
#pragma config LPBOREN = OFF    // Low Power BOR Enable bit (ULPBOR disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled , SBOREN bit is ignored)

// CONFIG2H
#pragma config BORV = VBOR_2P45 // Brown-out Reset Voltage Selection bits (Brown-out Reset Voltage (VBOR) set to 2.45V)
#pragma config ZCD = OFF        // ZCD Disable bit (ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON)
#pragma config PPS1WAY = ON     // PPSLOCK bit One-Way Set Enable bit (PPSLOCK bit can be cleared and set only once; PPS registers remain locked after one clear/set cycle)
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config DEBUG = OFF      // Debugger Enable bit (Background debugger disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Extended Instruction Set and Indexed Addressing Mode disabled)

// CONFIG3L
#pragma config WDTCPS = WDTCPS_31// WDT Period selection bits (Divider ratio 1:65536; software control of WDTPS)
#pragma config WDTE = OFF       // WDT operating mode (WDT Disabled; SWDTEN is ignored)

// CONFIG3H
#pragma config WDTCWS = WDTCWS_7// WDT Window Select bits (window always open (100%); software control; keyed access not required)
#pragma config WDTCCS = SC      // WDT input clock selector (Software Control)

// CONFIG4L
#pragma config BBSIZE = BBSIZE_512// Boot Block Size selection bits (Boot Block size is 512 words)
#pragma config BBEN = OFF       // Boot Block enable bit (Boot block disabled)
#pragma config SAFEN = OFF      // Storage Area Flash enable bit (SAF disabled)
#pragma config WRTAPP = OFF     // Application Block write protection bit (Application Block not write protected)

// CONFIG4H
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block not write-protected)
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)
#pragma config WRTSAF = OFF     // SAF Write protection bit (SAF not Write Protected)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE configuration bit is ignored)

// CONFIG5L
#pragma config CP = OFF         // PFM and Data EEPROM Code Protection bit (PFM and Data EEPROM code protection disabled)

#include <xc.h> // must have this
//#include "../../../../../Program Files/Microchip/xc8/v2.40/pic/include/proc/pic18f46k42.h"
//#include "C:\Program Files\Microchip\xc8\v2.40\pic\include\proc\pic18f46k42"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define _XTAL_FREQ 4000000                 // Fosc  frequency for _delay()  library
#define FCY    _XTAL_FREQ/4

#define RS LATD0                   /* Define Register Select (RS) signal for LCD */
#define EN LATD1                   /* Define Enable (EN) signal for LCD */
#define ldata LATB                 /* Define data lines for LCD */

#define LCD_Port TRISB             /* Define LCD data port */ 
#define LCD_Control TRISD          /* Define LCD control port */

/* Function prototypes for LCD operations */
void LCD_Init(void);
void LCD_Command(char );
void LCD_Char(char x);
void LCD_String(const char *);
void LCD_String_xy(char ,char ,const char*);
void MSdelay(unsigned int );
void LCD_Clear(void);

#define Vref 5.0                   /* Define voltage reference for ADC */
int digital;                       /* Variable to hold the digital value from ADC */
float voltage;                     /* Variable to hold the analog voltage value */
char data[10];                     /* Array to hold string data for LCD display */
void ADC_Init(void);               /* Function prototype for ADC initialization */

float LUX;                         /* Variable to hold calculated light intensity in Lux */

/* Main function */
void main() {
    ADC_Init();                    /* Initialize ADC */
    LCD_Init();                    /* Initialize LCD */
    //LCD_String_xy(1,0,"Input Voltage:");
    LCD_String_xy(1,0,"The Input Light:");    /* Display string at specified location on LCD */
    while (1) {
        ADCON0bits.GO = 1;         /* Start ADC conversion */
        while (ADCON0bits.GO);     /* Wait for ADC conversion to complete */
        digital = (ADRESH*256) | (ADRESL);    /* Combine ADC result bytes */
        voltage= digital*((float)Vref/(float)(4096)); /* Calculate analog voltage */
        
        LUX = voltage * 750;       /* Calculate light intensity in Lux */
        
        /* Convert integer Lux value to string and display on LCD */
        sprintf(data,"%d",(int)(LUX));
        //sprintf(data,"%.2f",voltage);
        
        strcat(data," LUX ");
        //strcat(data," V");
        LCD_String_xy(2,4,data); 
        MSdelay(600);
    }
}

/* Function definitions for LCD operations */
void LCD_Init(void)
{
    MSdelay(15);                   /* Delay for LCD power on */
    LCD_Port = 0x00;               /* Set LCD data port as output */
    LCD_Control = 0x00;            /* Set LCD control port as output */
    LCD_Command(0x01);             /* Send command to clear LCD display */
    LCD_Command(0x38);             /* Send command to initialize LCD in 2 line mode */
    LCD_Command(0x0c);             /* Send command to turn on LCD display */
    LCD_Command(0x06);             /* Send command to increment LCD cursor */
}

void LCD_Clear()
{
        LCD_Command(0x02);         /* Send command to clear LCD display */
}

void LCD_Command(char cmd )
{
    ldata= cmd;                    /* Send command to LCD */   
    RS = 0;                        /* Select LCD command register */
    EN = 1;                        /* Send high-to-low pulse on Enable pin to latch command */ 
    NOP();
    EN = 0;
    MSdelay(3); 
}

void LCD_Char(char dat)
{
    ldata= dat;            /* Assign the data to be displayed on LCD to 'ldata' */  
    RS = 1;                /* Set RS to 1 to select the Data Register */
    EN=1;                  /* Enable the LCD */
    NOP();                 /* No Operation (a small delay) */
    EN=0;                  /* Disable the LCD */
    MSdelay(1);            /* Delay to allow the LCD to process the data */
}

void LCD_String(const char *msg)
{
    while((*msg)!=0)       /* Loop through each character in the string */
    {       
      LCD_Char(*msg);      /* Display the current character on the LCD */
      msg++;               /* Move to the next character in the string */
    }
}

void LCD_String_xy(char row,char pos,const char *msg)
{
    char location=0;
    if(row<=1)
    {
        location=(0x80) | ((pos) & 0x0f); /* Calculate the LCD memory location for 1st row */
        LCD_Command(location);            /* Send the location as a command to the LCD */
    }
    else
    {
        location=(0xC0) | ((pos) & 0x0f); /* Calculate the LCD memory location for 2nd row */
        LCD_Command(location);            /* Send the location as a command to the LCD */
    }  
    LCD_String(msg);                      /* Display the string at the calculated location */
}

/* Function to create a delay */
void MSdelay(unsigned int val)
{
     unsigned int i,j;
     /* Outer loop 'i' runs 'val' times */
     for(i=0;i<val;i++)
         /* Inner loop 'j' runs 165 times */
         for(j=0;j<165;j++);      /* This loop provides a delay of 1 ms for 8MHz Frequency */
}


/* Function to initialize ADC */
void ADC_Init(void)
{
    ADCON0bits.FM = 1;  //right justify
    ADCON0bits.CS = 1; //ADCRC Clock
    
    TRISAbits.TRISA0 = 1; //Set RA0 to input
    ANSELAbits.ANSELA0 = 1; //Set RA0 to analog
    ADPCH = 0x00; //Set RA0 as Analog channel in ADC ADPCH
    ADCLK = 0x00; //set ADC CLOCK Selection register to zero
    
    ADRESH = 0x00; // Clear ADC Result registers
    ADRESL = 0x00; 
    
    ADPREL = 0x00; // set precharge select to 0 in register ADPERL & ADPERH
    ADPREH = 0x00; 
    
    ADACQL = 0x00;  // set acquisition low and high byte to zero 
    ADACQH = 0x00;    
    
    ADCON0bits.ON = 1; //Turn ADC On 
}
